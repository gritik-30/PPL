## The Notion of Time Binding
    Binding:
        A binding is an association between two things,
        such as a name and the thing it names.
    Binding time:
        Binding time is the time at which a binding is created
        or, more generally,
        the time at which any implementation decision is made.

        1. Language design time
        2. Language implementation time
        3. Program writing time
        4. Compile time
        5. Link time
        6. Load time
        7. Run time

## Object Lifetime and Storage Management

    # Object Lifetime:
        The period of time between the creation and destruction of a name-to-object binding is called the binding’s lifetime.
        Similarly, the time between the creation and destruction of an object is the object’s lifetime.

        key events:
            * The creation of objects
            * The creation of bindings
            * References to variables, subroutines, types, and so on, all of which use bindings
            * The deactivation and reactivation of bindings that may be temporarily unusable
            * The destruction of bindings
            * The destruction of objects

    # Storage Management:
        Object lifetimes generally correspond to one of three principal storage allocation mechanisms, used to manage the object’s space:
            1. Static objects are given an absolute address that is retained throughout the program’s execution.

            2. Stack objects are allocated and deallocated in last-in, first-out order, usually in conjunction with subroutine calls and returns.

            3. Heap objects may be allocated and deallocated at arbitrary times. They require a more general (and expensive) storage management algorithm.

        A. Static Allocation:
            * 'Global variables' are the obvious example of static objects.
            * The 'instructions' that constitute a program’s 'machine-language translation' can also be thought of as statically allocated objects.
            * The space of variables that are local to a single subroutine but retain their values from one invocation to the next; is statically allocated.
            * 'Numeric and string-valued constant literals' are also statically allocated (A = B/14.7 or printf("hello, world\n").
                note: Small constants are often stored within the instruction itself; larger ones are assigned a separate location.

            Statically allocated objects whose value should not change during program execution are often allocated in protected, read-only memory.
                (instructions, constants, and certain run-time tables)
            Thus, any inadvertent attempt to write to them will cause a processor interrupt.
            This allows the operating system to announce a run-time error.

            # Static Allocation for Recursive Subroutine:
                - local variables are created when their subroutine is called and destroyed when it returns.
                - if subroutines is called repeatedly each invocation will create and destroy a separate instance of each variable.
                -  a language must perform work at run-time corresponding to these create and destroy operations.
            
            # Static Allocation for Non-Recursive Subroutine:
                - recursion wasn't supported in older systems
                - hence, there can never be more than one invocation of a subroutine active at any given time
                - a compiler may choose to use static allocation for local variables
                - compiler arrange the variables of different invocations to share the same locations
                - this way it avoids any run-time overhead for creation and destruction

        B. Stack-Based Allocation
            * If a language permits recursion, the number of instances of a variable that may need to exist at the same time time is conceptually unbounded.
            * Here, static allocation of local variables is no longer an option.
            * In this case, stack based allocation is used.
            * The natural nesting of sub-routine calls makes it easy to allocate space for locals on a stack.

            # Frame:    
                - Each instance of a subroutine at run time has its own frame (also called an activation record) on the stack.
                - It contains arguments and return values, local variables, temporaries, and bookkeeping information.
                    - Arguments are at the top of the frame
                        (caller can easily find them)
                    - Remaining information is organized according to the desired implementation
                        (varies from language to language and compiler to compiler)
                - location of a stack frame cannot be predicted at compile time
                - however, compiler can arranges a frame pointer in the calling sequence of prologue
            
            # Frame Pointer:
                - is a register which always point to a known location within the frame of the current subroutine
                - code can access
                    a local variable within the current frame,
                    or an argument near the top of the calling frame
                    by adding a predetermined offset to the value in the frame pointer
                - arguments and returns typically have positive offsets from the frame pointer
                - local variables, temporaries, and bookkeeping information typically have negative offsets

            * note:
                Even in a language without recursion,
                    it can be advantageous to use a stack for local variables,
                    rather than allocating them statically.
                A stack may require substantially less memory at run time
                    than would be required for static allocation.

            # Maintenance of Stack:
                the responsibility of maintaining the stack belongs to:
                1. Prologue:
                    code executed at the beginning
                2. Epilogue:
                    code executed at the end
                3. Calling Sequence:
                    - the code executed by the caller immediately before and after the call
                    - or the combined operations of caller, the prologue, and the epilogue.
                    
        C. Heap Allocation:
            * A heap is a region of storage in which subblocks can be allocated and deallocated at arbitrary times.
            * Heaps are required for
                dynamically allocated pieces of linked data structures
                dynamically resized objects
                    (such as fully general character strings, lists, and sets)
                whose size may change as a result of an assignment statement or other update operation

            # Space Concerns:
                A. Internal Fragmentation:
                    - occurs when a storage-management algorithm allocates a block that is larger than required to hold a given object
                    - the extra space is then unused.
                B. External Fragmentation:
                    - occurs when the blocks that have been assigned to active objects
                      are scattered through the heap in such a way that
                      the remaining, unused space is composed of multiple blocks:
                          there may be quite a lot of free space,
                          but no one piece of it may be large enough to satisfy some future request
        
        D. Garbage Management:
            - when some operation is executed in a program, allocation of heap-based object is triggered
            - when the program is no longer running, deallocation of space needs to be done
            - in some languages deallocation is done explicitly (C, C++, Pascal)
            - may languages  specify that objects are to be deallocated implicitly so that
                it is no longer possible to reach them from any program variable
            -  The run-time library for such a language must then provide a garbage collection mechanism
                to identify and reclaim unreachable objects
            - Most functional and imperative languages require garbage collection (Modula-3, Java, C#)
            
            # Explicit Deallocation (Manual Deallocation):
                - it can implemented easily and have high execution speed
                - if the programmer can correctly identify the end of an object’s lifetime,
                    without too much run-time bookkeeping,
                    the result is likely to be faster execution.

            # Implicit Deallocation (Automatic Garbage Collection):
                - manual deallocation errors are among the most common and costly bugs in real-world programs
                - if an object is deallocated too soon, the program may follow a 'Dangling Reference'
                - if an object is not deallocated at the end of its lifetime, then the program may 'leak memory'
                - deallocation errors are notoriously difficult to identify and fix.
                - to overcome these problems, both language designers and programmers have increasingly come to consider
                    automatic garbage collection an essential language feature.
                - although, garbage collection algorithms are complex and have lesser execution speed
                    they have been improved overtime,  reducing their run-time overhead

            ## DANGLING REFERENCE:
                A dangling pointer, or dangling reference, is a pointer that contains
                    the address of a heap-dynamic variable that has been deallocated

                - the location being pointed to may have been reallocated to some new heap-dynamic variable
                - if the new variable is not the same type as the old one,
                    type checks of uses of the dangling pointer are invalid
                - even if the new dynamic variable is the same type,
                    its new value will have no relationship to the old pointer’s dereferenced value

                - it is possible that the location now is being temporarily used by the storage management system
                - this might allow a change to the location to cause the storage manager to fail.